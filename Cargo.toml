[workspace]
members = ["datatypes", "expression", "macros", "operators", "services"]
exclude = [
    "expression/deps-workspace", # Buggy, cf. https://github.com/rust-lang/cargo/issues/6745
    ".scripts",
]
# Edition 2021 defaults to resolver 2, but virtual workspaces default to resolver 1, so we need to set it explicitly.
resolver = "2"

[workspace.package]
version = "0.8.0"
authors = [
    "Christian Beilschmidt <beilschmidt@mathematik.uni-marburg.de>",
    "Johannes Dr√∂nner <droenner@mathematik.uni-marburg.de>",
    "Michael Mattig <mattig@mathematik.uni-marburg.de>",
]
edition = "2024"
publish = false
license-file = "LICENSE"
documentation = "https://docs.geoengine.io"
repository = "https://github.com/geo-engine/geoengine"

# Rust does not inline across crates if link-time optimization (LTO) is off, which it is by default.
# TODO: Maybe https://rust-lang.github.io/rust-clippy/stable/index.html#missing_inline_in_public_items is more suitable
[profile.release]
lto = true

[profile.ci]
inherits = "test"
strip = "debuginfo"

[workspace.lints.clippy]
# configure default clippy lints
complexity = { level = "warn", priority = 0 }
style = { level = "warn", priority = 0 }
perf = { level = "warn", priority = 0 }
pedantic = { level = "warn", priority = 0 }
correctness = "deny"

# disable some pedantic lints
result_large_err = { level = "allow", priority = 1 }          # TODO: investigate this
cast_possible_truncation = { level = "allow", priority = 1 }
cast_possible_wrap = { level = "allow", priority = 1 }
cast_precision_loss = { level = "allow", priority = 1 }
cast_sign_loss = { level = "allow", priority = 1 }
default_trait_access = { level = "allow", priority = 1 }
missing_errors_doc = { level = "allow", priority = 1 }
module_name_repetitions = { level = "allow", priority = 1 }
must_use_candidate = { level = "allow", priority = 1 }
non_ascii_literal = { level = "allow", priority = 1 }
option_if_let_else = { level = "allow", priority = 1 }
similar_names = { level = "allow", priority = 1 }
single_match_else = { level = "allow", priority = 1 }
type_repetition_in_bounds = { level = "allow", priority = 1 }
wildcard_imports = { level = "allow", priority = 1 }

# enable some restriction lints
dbg_macro = { level = "warn", priority = 1 }
print_stderr = { level = "warn", priority = 1 }
print_stdout = { level = "warn", priority = 1 }
unimplemented = { level = "warn", priority = 1 }
unwrap_used = { level = "warn", priority = 1 }

[workspace.dependencies]
actix = { version = "0.13", default-features = false }
actix-files = "0.6"
actix-http = { version = "3.11", features = ["ws"] }
actix-multipart = "0.7"
actix-rt = "2.9"
actix-web = "4.11"
actix-web-httpauth = "0.8"
actix-ws = "0.3"
aes-gcm = "0.10.3"
anyhow = "1.0"
approx = "0.5"
arrow = { version = "55.2", features = ["ipc_compression"] }
arrow-array = "55.2"
arrow-ord = "55.2"
arrow-schema = { version = "55.2", features = ["serde"] }
aruna-rust-api = "2.0.2"
assert_cmd = "2.0"
async-stream = "0.3"
async-trait = "0.1"
base64 = "0.22"
bb8-postgres = { version = "0.9", features = [
    "with-uuid-1",
    "with-chrono-0_4",
    "with-serde_json-1",
] }
bytes = "1.10" # for postgres-types impls
chrono = { version = "0.4", features = ["serde"] }
clap = { version = "4.5", features = ["derive"] }
clap_derive = "4.5"
config = "0.15"
convert_case = "0.8"
criterion = "0.6"
csv = "1.3"
erased-serde = "0.4"
fallible-iterator = "0.2" # only for postgres-protocol
flexi_logger = { version = "0.31", features = ["trc"] }
float-cmp = "0.10"
futures = "0.3"
futures-util = "0.3"
gdal = "0.18"
gdal-sys = "0.11"
# when changing geo version also adapt the Cargo.toml in the expression "deps-workspace"!
geo = "0.30.0"
geo-rand = { git = "https://github.com/lelongg/geo-rand.git", branch = "dependabot/cargo/geo-0.30.0" } # TODO: revert back to "0.5" when it is released
geo-types = "0.7.16"                                                       # important for compatibility when linking expressions
geojson = { version = "0.24", features = ["geo-types"] }
httptest = "0.16"
image = "0.25"
itertools = "0.14"
libloading = "0.8"
lru = "0.16"
lz4_flex = "0.11"
mime = "0.3"
ndarray = { version = "0.16", features = ["approx"] }                      # has to match with `ort`
num = "0.4"
num-traits = "0.2"
oauth2 = "5.0"
openidconnect = "4.0"
ordered-float = { version = "5.0", features = ["serde"] }
# `opentelemetry` version has to be compatible with `tracing-opentelemetry` & `opentelemetry-*`
opentelemetry = { version = "0.30", default-features = false, features = [
    "trace",
] }
opentelemetry_sdk = { version = "0.30", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.30", features = ["grpc-tonic"] }
ort = { version = "2.0.0-rc.10", features = ["ndarray"] }
ouroboros = "0.18"
paste = "1.0"
pbkdf2 = "0.12.2"
pest = "2.8"
pest_derive = "2.8"
pin-project = "1.1"
postgres-protocol = "0.6"
postgres-types = { version = "0.2", features = [
    "array-impls",
    "derive",
    "with-chrono-0_4",
    "with-uuid-1",
] }
pretty_assertions = "1.4"
prettyplease = "0.2"
proc-macro2 = "1.0"
proj = "0.28" # needs to stay fixed to use fixed proj version
proj-sys = "0.25" # needs to stay fixed to use fixed proj version
prost = "0.12" # must be compatible with `aruna-rust-api`
pwhash = "1.0"
quote = "1.0"
rand = "0.9"
rayon = "1.8"
reqwest = { version = "0.12", features = [
    "json",
    "multipart",
    "stream",
] } # has to match with `oauth`
rustc-hash = { version = "2.1", default-features = false }
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"
serde_urlencoded = "0.7"
serde_with = "3.14"
serial_test = "3.0"
sha2 = "0.10"
snafu = "0.8"
stac = "0.12"
stream-cancel = "0.8"
strum = { version = "0.27", features = ["derive"] }
strum_macros = "0.27"
syn = { version = "2.0", features = ["full", "extra-traits"] }
tempfile = "3.18"
time = "0.3"
tokio = { version = "1.46", features = [
    "fs",
    "macros",
    "signal",
    "sync",
    "rt-multi-thread",
    "time",
] }
tokio-postgres = "0.7"
toml = { version = "0.9", features = ["parse"] }
tonic = { version = "0.11", features = [
    "tls",
    "tls-roots",
] } # must be compatible with `aruna-rust-api`
tracing = { version = "0.1", features = ["release_max_level_debug"] }
tracing-actix-web = "0.7"
tracing-opentelemetry = "0.31" # As of 0.26, tracing-opentelemetry is one version ahead of the opentelemetry crates
tracing-subscriber = { version = "0.3", features = [
    "local-time",
    "ansi",
    "tracing-log",
] }
tracing-appender = "0.2.3"
typetag = "0.2"
url = { version = "2.5", features = ["serde"] }
utoipa = { version = "5.4", features = [
    "actix_extras",
    "chrono",
    "debug",
    "url",
    "uuid",
] }
utoipa-swagger-ui = { version = "9", features = ["actix-web"] }
uuid = { version = "1.17", features = [
    "serde",
    "v4",
    "v5",
] } # must be compatible with `bb8-postgres`
validator = { version = "0.20", features = ["derive"] }
vergen = "9.0"
vergen-gitcl = "1.0"
walkdir = "2.4"
wkt = "0.14"
xml-rs = "0.8"
zip = "4.2"
